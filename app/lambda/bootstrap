#!/bin/sh
# if we switch to bash we can add -o pipefail
set -xu

# Initialization - load function handler
# source $LAMBDA_TASK_ROOT/"$(echo $_HANDLER | cut -d. -f1).sh"

cd "$LAMBDA_TASK_ROOT" || (echo "exit on failure" && exit)

APP_TYPE='UNKNOWN'
if [ -f 'yarn.lock' ]; then
	APP_TYPE='YARN'
	yarn -v
	node -v
	yarn start &
	sleep 1
elif [ -f 'package-lock.json' ] || [ -f 'package.json' ]; then
	APP_TYPE='NPM'
	npm -v
	node -v
	npx -v
	npm start &
	sleep 1
elif [ -f 'requirements.txt' ]; then
	APP_TYPE='PIP'
	export FLASK_APP=index.py
	flask run
else
	echo 'Unknown app type. Going to just call install'
	./install
fi
echo "${APP_TYPE}"

# Processing
while true; do
	echo 'bootstrap request loop head'
	HEADERS="$(mktemp)"
	# Get an event. The HTTP request will block until one is received
	EVENT_DATA=$(curl -sS -LD "$HEADERS" -X GET "http://${AWS_LAMBDA_RUNTIME_API}/2018-06-01/runtime/invocation/next")

	# Extract request ID by scraping response headers received above
	REQUEST_ID=$(grep -Fi Lambda-Runtime-Aws-Request-Id "$HEADERS" | tr -d '[:space:]' | cut -d: -f2)

	# Run the handler function from the script
	#   RESPONSE=$($(echo "$_HANDLER" | cut -d. -f2) "$EVENT_DATA")
	echo "$EVENT_DATA"
	RESPONSE=$(curl -sS -LD "$HEADERS" -X GET "http://localhost:3000")

	# Send the response
	curl -X POST "http://${AWS_LAMBDA_RUNTIME_API}/2018-06-01/runtime/invocation/$REQUEST_ID/response" -d "$RESPONSE"
done

echo 'bootstrap script complete'
